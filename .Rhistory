ggplot(data = data.frame(x = c(0, 1300)), aes(x)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 660, sd = 200), aes(color = "group 1")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 620, sd = 200), aes(color = "group 2")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 580, sd = 200), aes(color = "group 3")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 540, sd = 200), aes(color = "group 4")) +
scale_color_manual(values=c("deepskyblue4", "firebrick2","lightseagreen","coral"))+
ylab("") +
scale_y_continuous(breaks = NULL)
ggplot(data = data.frame(x = c(0, 1500)), aes(x)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 800, sd = 200), aes(color = "group 1")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 633, sd = 200), aes(color = "group 2")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 567, sd = 200), aes(color = "group 3")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 500, sd = 200), aes(color = "group 4")) +
scale_color_manual(values=c("deepskyblue4", "firebrick2","lightseagreen","coral"))+
ylab("") +
scale_y_continuous(breaks = NULL)
ggplot(data = data.frame(x = c(0, 1500)), aes(x)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 800, sd = 200), aes(color = "group 1")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 633, sd = 200), aes(color = "group 2")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 567, sd = 200), aes(color = "group 3")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 400, sd = 200), aes(color = "group 4")) +
scale_color_manual(values=c("deepskyblue4", "firebrick2","lightseagreen","coral"))+
ylab("") +
scale_y_continuous(breaks = NULL)
ggplot(data = data.frame(x = c(0, 1500)), aes(x)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 920, sd = 200), aes(color = "group 1")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 707, sd = 200), aes(color = "group 2")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 493, sd = 200), aes(color = "group 3")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 280, sd = 200), aes(color = "group 4")) +
scale_color_manual(values=c("deepskyblue4", "firebrick2","lightseagreen","coral"))+
ylab("") +
scale_y_continuous(breaks = NULL)
ggplot(data = data.frame(x = c(0, 1300)), aes(x)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 660, sd = 200), aes(color = "group 1")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 620, sd = 200), aes(color = "group 2")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 580, sd = 200), aes(color = "group 3")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 540, sd = 200), aes(color = "group 4")) +
scale_color_manual(values=c("deepskyblue4", "firebrick2","lightseagreen","coral"))+
ylab("") +
scale_y_continuous(breaks = NULL)
ggplot(data = data.frame(x = c(0, 1500)), aes(x)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 800, sd = 200), aes(color = "group 1")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 633, sd = 200), aes(color = "group 2")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 567, sd = 200), aes(color = "group 3")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 400, sd = 200), aes(color = "group 4")) +
scale_color_manual(values=c("deepskyblue4", "firebrick2","lightseagreen","coral"))+
ylab("") +
scale_y_continuous(breaks = NULL)
library(ggplot2)
p = ggplot(data = data.frame(x = 0), mapping = aes(x = x))
def_rate_fico = function(x){(1-1/(1+exp(-.16*(x-50))))}
p + stat_function(fun = def_rate_fico, size = 1) +
xlim(0,100) +
theme_minimal()+
theme(text = element_text(size=20))+
ggtitle("Likelihood of Defaulting")
ggplot(data = data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 75, sd = 10), aes(color = "group 1")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 60, sd = 10), aes(color = "group 2")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 45, sd = 10), aes(color = "group 3")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 30, sd = 10), aes(color = "group 4")) +
scale_color_manual(values=c("deepskyblue4", "firebrick2","lightseagreen","coral"))+
ylab("") +
scale_y_continuous(breaks = NULL)
n_critical_75 <- qnorm(0.70, mean = 75, sd = 10)
n_critical_60 <- qnorm(0.70, mean = 60, sd = 10)
n_critical_45 <- qnorm(0.70, mean = 45, sd = 10)
n_critical_30 <- qnorm(0.70, mean = 30, sd = 10)
ggplot(NULL, aes(x = c(0, 100))) +
# T-distribution with 5 degrees of freedom
#   Non-significant area
stat_function(fun = dnorm,
geom = "line",
xlim = c(0, 100),
args = list(
mean = 75, sd = 10
)) +
#   Significant area
stat_function(fun = dnorm,
geom = "area",
xlim = c(n_critical_75, 100),
alpha = .3,
fill = "deepskyblue4",
args = list(
mean = 75, sd = 10
)) +
# t-distribution with 25 degrees of freedom
#   Non-significant area
stat_function(fun = dnorm,
geom = "line",
xlim = c(0, 100),
args = list(
mean = 60, sd = 10
)) +
#   Significant area
stat_function(fun = dnorm,
geom = "area",
xlim = c(n_critical_60, 100),
alpha = .3,
fill = "firebrick2",
args = list(
mean = 60, sd = 10
)) +
stat_function(fun = dnorm,
geom = "line",
xlim = c(0, 100),
args = list(
mean = 45, sd = 10
)) +
#   Significant area
stat_function(fun = dnorm,
geom = "area",
xlim = c(n_critical_45, 100),
alpha = .3,
fill = "lightseagreen",
args = list(
mean = 45, sd = 10
)) +
stat_function(fun = dnorm,
geom = "line",
xlim = c(0, 100),
args = list(
mean = 30, sd = 10
)) +
#   Significant area
stat_function(fun = dnorm,
geom = "area",
xlim = c(n_critical_30, 100),
alpha = .3,
fill = "coral",
args = list(
mean = 30, sd = 10
)) +
geom_vline(xintercept = n_critical_75, linetype="dotted")+
geom_vline(xintercept = n_critical_60, linetype="dotted")+
geom_vline(xintercept = n_critical_45, linetype="dotted")+
geom_vline(xintercept = n_critical_30, linetype="dotted")+
theme_minimal()+
theme(text = element_text(size=20))+
xlab("Fitness")+
ylab("Probability Density")+
xlim(0, 100)
pgn <- system.file("extdata/example.pgn", package = "rchess")
pgn <- readLines(pgn, warn = FALSE)
pgn <- system.file("extdata/pgn/example.pgn", package = "rchess")
pgn <- readLines(pgn, warn = FALSE)
pgn <- paste(pgn, collapse = "\n")
cat(pgn)
#pgn <- paste(pgn, collapse = "\n")
cat(pgn)
pgn <- system.file("extdata/pgn/example.pgn", package = "rchess")
pgn <- readLines(pgn, warn = FALSE)
#pgn <- paste(pgn, collapse = "\n")
cat(pgn)
pgn
pgn <- paste(pgn, collapse = "\n")
cat(pgn)
pgn
pgn <- system.file("extdata/pgn/example.pgn", package = "rchess")
pgn <- readLines(pgn, warn = FALSE)
pgn <- paste(pgn, collapse = "\n")
cat(pgn)
kasparov_vs_topalov
pgn <- system.file("extdata/pgn/kasparov_vs_topalov.pgn", package = "rchess")
pgn <- readLines(pgn, warn = FALSE)
pgn <- paste(pgn, collapse = "\n")
cat(pgn)
pgn
pgn <- system.file("extdata/pgn/kasparov_vs_topalov.pgn", package = "rchess")
pgn <- readLines(pgn, warn = FALSE)
cat(pgn)
pgn <- system.file("extdata/pgn/example.pgn", package = "rchess")
pgn <- readLines(pgn, warn = FALSE)
cat(pgn)
pgn <- system.file("extdata/pgn/kasparov_vs_topalov.pgn", package = "rchess")
pgn <- readLines(pgn, warn = FALSE)
cat(pgn)
pgn <- system.file("extdata/pgn/kasparov_vs_topalov.pgn", package = "rchess")
pgn <- readLines(pgn, warn = FALSE)
cat(pgn)
pgn <- paste(pgn, collapse = "\n")
cat(pgn)
length(pgn)
dtype(pgn)
library(pigeon)
library(rchess)
library(tidyverse)
dtype(pgn)
type(pgn)
typeof(pgn)
cat(pgn)
pgnstr = toString(pgn)
typeof(pgnstr)
pgnstr = toString(pgn)
typeof(pgnstr)
pgn[0]
cat(pgn)
chsspgn <- Chess$new()
chsspgn$load_pgn(pgn)
chsspgn$history()
plot(chsspgn)
chss = Chess$new()
chss$load_pgn(pgn)
chss$history()
plot(chss)
chss$moves()
chss$history()
cat(pgn)
df_hist = chss$moves(verbose = TRUE)
plot(chss)
df_hist
chss$history()
chss$header()
chss$header(2)
chss$header()
chss
chss$history_detail()
chss
#legal moves
chss$moves()
plot(chss)
chss$move("Nbd7")
plot(chss)
#list of legal moves
chss$moves()
chss$move("h4")
plot(chss)
chss$undo()
plot(chss)
#get fen
chss$fen()
#install.packages("rchess")
#devtools::install_github("hrbrmstr/pigeon")
install.packages("rlang", dependencies = TRUE)
library(pigeon)
library(rchess)
library(tidyverse)
pgn = system.file("extdata/pgn/kasparov_vs_topalov.pgn", package = "rchess")
pgn = readLines(pgn, warn = FALSE)
pgn = paste(pgn, collapse = "\n")
cat(pgn)
chss = Chess$new()
chss$load_pgn(pgn)
plot(chss)
#list of legal moves
chss$moves()
chss$moves(verbose = TRUE)
chss$history()
chss$history_detail()
#get fen
chss$fen()
chss$history()
hist = chss$history()
hist = chss$history()
test = Chess$new()
chss$move(hist[1])
test$move(hist[1])
plot(test)
test$moves()
#install.packages("rchess")
#devtools::install_github("hrbrmstr/pigeon")
#install.packages("rlang", dependencies = TRUE)
install.packages("stockfisher")
#install.packages("rchess")
#devtools::install_github("hrbrmstr/pigeon")
#install.packages("rlang", dependencies = TRUE)
stockfish = startStockfish()
#install.packages("rchess")
#devtools::install_github("hrbrmstr/pigeon")
#install.packages("rlang", dependencies = TRUE)
install.packages("remotes")
install.packages("remotes")
remotes::install_github("oganm/stockfisher")
stockfish = startStockfish()
#install.packages("rchess")
#devtools::install_github("hrbrmstr/pigeon")
#install.packages("rlang", dependencies = TRUE)
#install.packages("remotes")
#remotes::install_github("oganm/stockfisher")
library(stockfisher)
#install.packages("rchess")
#devtools::install_github("hrbrmstr/pigeon")
#install.packages("rlang", dependencies = TRUE)
#install.packages("remotes")
#remotes::install_github("oganm/stockfisher")
library(oganm/stockfisher)
engine = subprocess::spawn_process('/Users/choldawa/Documents/Projects/Chess')
install.packages('subprocess')
install.packages('stockfisher')
install.packages('stockfisher',repos='http://cran.us.r-project.org')
install.packages('subprocess',repos='http://cran.us.r-project.org')
#install.packages("rchess")
#devtools::install_github("hrbrmstr/pigeon")
#install.packages("rlang", dependencies = TRUE)
#install.packages("remotes")
#remotes::install_github("oganm/stockfisher")
#install.packages('subprocess',repos='http://cran.us.r-project.org')
library(pigeon)
library(rchess)
library(tidyverse)
pgn = system.file("extdata/pgn/kasparov_vs_topalov.pgn", package = "rchess")
pgn = readLines(pgn, warn = FALSE)
pgn = paste(pgn, collapse = "\n")
cat(pgn)
chss = Chess$new()
chss$load_pgn(pgn)
engine_path <- "./stockfish_10_x64"
setwd("~/Documents/Projects/Chess")
engine_path <- "./stockfish_10_x64"
# Windows
# engine_path <- "./stockfish_10_x64.exe"
e <- uci_engine(engine_path)
install.packages('bigchess')
library(bigchess)
engine_path <- "./stockfish_10_x64"
# Windows
# engine_path <- "./stockfish_10_x64.exe"
e <- uci_engine(engine_path)
engine_path <- "stockfish_10_x64"
# Windows
# engine_path <- "./stockfish_10_x64.exe"
e <- uci_engine(engine_path)
engine_path <- "/Users/choldawa/Documents/Projects/Chess/stockfish_10_x64"
# Windows
# engine_path <- "./stockfish_10_x64.exe"
e <- uci_engine(engine_path)
engine_path <- "Users/choldawa/Documents/Projects/Chess/stockfish_10_x64"
# Windows
# engine_path <- "./stockfish_10_x64.exe"
e <- uci_engine(engine_path)
engine_path <- "./Users/choldawa/Documents/Projects/Chess/stockfish_10_x64"
# Windows
# engine_path <- "./stockfish_10_x64.exe"
e <- uci_engine(engine_path)
engine_path <- "Users/choldawa/Documents/Projects/Chess/stockfish_10_x64"
# Windows
# engine_path <- "./stockfish_10_x64.exe"
e <- uci_engine(engine_path)
engine_path <- "Users/choldawa/Documents/Projects/Chess/stockfish-10-64"
e <- uci_engine(engine_path)
engine_path <- "./stockfish-10-64"
e <- uci_engine(engine_path)
e <- uci_position(moves = "e2e4")
e <- uci_engine(engine_path)
e
e <- uci_position(moves = "e2e4")
ep <- uci_position(e, moves = "e2e4")
e <- uci_go(depth = 10)
e <- uci_go(e, depth = 10)
e <- uci_engine(engine_path)
ep <- uci_position(e, moves = "e2e4")
eg <- uci_go(e, depth = 10)
eg
uci_read(e)
uci_read(e)$tmp
ep
ep <- uci_position(e, moves = "e2e4")
ep
ep$temp
require(magrittr)
ap <- analyze_position(engine_path,san = "1. e4",depth = 20)
ap$bestmove_lan
# "e7e5"
ap$score
# -7
ap$bestmove_san
# "e5"
ap$curpos_lan
ap <- analyze_position(engine_path,san = "e2e4",depth = 20)
ap$bestmove_lan
# "e7e5"
ap$score
# -7
ap$bestmove_san
test$move(hist[1])
pgn = system.file("extdata/pgn/kasparov_vs_topalov.pgn", package = "rchess")
pgn = readLines(pgn, warn = FALSE)
pgn = paste(pgn, collapse = "\n")
cat(pgn)
chss = Chess$new()
chss$load_pgn(pgn)
plot(chss)
#list of legal moves
chss$moves()
chss$moves(verbose = TRUE)
chss$history()
chss$history_detail()
#get fen
chss$fen()
#add a new move to board
chss$move("Nbd7")
#moves can be concatenated, e.g. below
#chss$move("e5")$move("f4")$move("Qe7")$move("fxe5")
chss$undo()
plot(chss)
hist = chss$history()
test = Chess$new()
test$move(hist[1])
plot(test)
test$moves()
stockfish = startStockfish()
hist
ap <- analyze_position(engine_path,san = hist[1],depth = 20)
ap$bestmove_lan
# "e7e5"
ap$score
# -7
ap$bestmove_san
# "e5"
ap$curpos_lan
# "e2e4"
ap$curpos_san
# "1. e4"
ap$bestline_san
# "e5 2. Nf3 Nc6 3. d4 exd4 4. Bc4 Nf6 5. O-O Be7
# 6. Re1 d6 7. Nxd4 Ne5 8. Bb3 O-O 9. Nc3 c5
# 10. Nf5 Bxf5 11. exf5 c4 12. Ba4 a6 13. Qe2"
ap$bestline_lan
#load game from pgn string
pgn <- "1. e4 e5 2. Nf3 Nc6 3. Bb5 a6
4. Ba4 Nf6 5. O-O Be7 6. Re1 b5 7. Bb3 d6
8. c3 O-O 9. h3 Nb8  10. d4 Nbd7
11. c4 c6 12. cxb5 axb5 13. Nc3 Bb7
14. Bg5 b4 15. Nb1 h6 16. Bh4 c5 17. dxe5
Nxe4 18. Bxe7 Qxe7 19. exd6 Qf6 20. Nbd2 Nxd6 21. Nc4 Nxc4"
#chss <- Chess$new(--add FEN here to load specific position--)
chss <- Chess$new()
chss$load_pgn(pgn)
plot(chss)
chss$moves()
ap <- analyze_position(engine_path,san = pgn,depth = 10)
ap <- analyze_position(engine_path,san = hist[1:2],depth = 10)
ap$bestmove_lan
hist[1:2]
ap$bestmove_lan
# "e7e5"
ap$score
# -7
ap$bestmove_san
ap$bestmove_lan
#ap$bestmove_lan
ap$bestmove_san
ap$score
ap$curpos_lan
hist
hist[1:2]
ap <- analyze_position(engine_path,san = "d4",depth = 10)
#ap$bestmove_lan
ap$bestmove_san
ap$score
ap$curpos_lan
# "e2e4"
ap$curpos_san
ap <- analyze_position(engine_path,san = "e4",depth = 10)
#ap$bestmove_lan
ap$bestmove_san
ap$score
ap$curpos_san
ap <- analyze_position(engine_path,san = "e4e5",depth = 10)
#ap$bestmove_lan
ap$bestmove_san
ap$score
ap$curpos_san
# "1. e4"
ap$bestline_san
ap <- analyze_position(engine_path,san = "e4e5Nf3",depth = 10)
#ap$bestmove_lan
ap$bestmove_san
ap <- analyze_position(engine_path,san = "e4e5 Nf3",depth = 10)
#ap$bestmove_lan
ap$bestmove_san
ap$score
ap$curpos_san
# "1. e4"
ap$bestline_san
ap <- analyze_position(engine_path,san = "e4 e5 Nf3",depth = 10)
#ap$bestmove_lan
ap$bestmove_san
ap$score
ap$curpos_san
ap <- analyze_position(engine_path,san = "e4 e5",depth = 10)
#ap$bestmove_lan
ap$bestmove_san
ap$score
ap$curpos_san
ap <- analyze_position(engine_path,san = "e4 e5 Nf6",depth = 10)
ap <- analyze_position(engine_path,san = "e4 e5 Nf6",depth = 10)
#ap$bestmove_lan
ap$bestmove_san
ap$score
ap <- analyze_position(engine_path,san = "e4 e5 Nf6 Nc3",depth = 10)
#ap$bestmove_lan
ap$bestmove_san
ap$score
ap$curpos_san
ap <- analyze_position(engine_path,san = "e4 e5 Nf3 Nc6",depth = 10)
#ap$bestmove_lan
ap$bestmove_san
ap$score
ap$curpos_san
ap <- analyze_position(engine_path,san = "e4 e5 Nf3 Nc6 Bb5",depth = 10)
#ap$bestmove_lan
ap$bestmove_san
ap$score
ap$curpos_san
# "1. e4"
ap$bestline_san
hist[1:2]
ap <- analyze_position(engine_path,san = hist[1:2],depth = 10)
#ap$bestmove_lan
ap$bestmove_san
hist
